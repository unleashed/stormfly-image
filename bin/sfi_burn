#!/usr/bin/env ruby
$: << File.expand_path('../../lib', __FILE__)
require 'stormfly/image'
require 'stormfly/image/commandline'

include StormFly::Image::Util::Spinner
include StormFly::Image::CommandLine

def get_uuids(uuidfile)
  {}.tap do |uuids|
    spinner "Reading and generating UUIDs", short: "UUIDs" do |output|
      File.open uuidfile, 'rb' do |f|
        StormFly::Image::UUID::Gatherer.new(f).each do |u|
          # build a new substitute for each UUID
          uuids[u] = u.class.generate
          output << "Will replace #{u} with #{uuids[u]}"
        end
      end # open
    end # spinner
  end # tap
end

def with_options(*args)
  # default options
  options = { check: false, pagecache_hinting: true, uuidfile: nil }

  optparser = option_parser(*args) do |opts|
    opts.on '-c', '--[no-]check', 'Check critical blocks for correctness' do |bool|
      options[:check] = bool
    end

    opts.on '-k', '--no-hints', 'Disable page cache hinting' do
      options[:pagecache_hinting] = false
    end

    opts.on '-i IMAGEFILE', '--image', Pathname, 'Image file' do |imagefile|
      options[:imagefile] = imagefile
    end

    opts.on '-u UUIDFILE', '--uuids', Pathname, 'UUID file' do |uuidfile|
      options[:uuidfile] = uuidfile
    end

    opts.on '-t TARGETDEVICE', '--target', WritablePathname, 'Target device' do |targetfile|
      options[:targetfile] = targetfile
    end
  end

  begin
    optparser.parse!
  rescue OptionParser::InvalidOption, OptionParser::MissingArgument => e
    STDERR.puts "#{e}\n#{optparser}"
    exit 1
  rescue ArgumentError => e
    STDERR.puts "error: #{e}"
    exit 2
  end

  if options[:check] and not options[:pagecache_hinting]
    STDERR.puts "Conflicting options: it is useless to perform checks without hinting the page cache.\n#{optparser}"
    exit 1
  end

  mandatory_opts = {:imagefile => '--image', :targetfile => '--target' }
  missing_opts = mandatory_opts.select { |key, _| options[key].nil? }
  unless missing_opts.empty?
    STDERR.puts "Missing options: #{missing_opts.values.join ', '}\n#{optparser}"
    exit 1
  end

  yield options
end

Application.run do
  with_options "Usage: #{File.basename $0} [-h | -v] | [-c] <-i imagefile> <-u uuidfile> <-t targetdevice>" do |opt|
    if not opt[:pagecache_hinting]
      class File
        def advise(*args)
          # monkey-patching says 'Hello' ;)
        end
      end
    end

    # exit code 10 if burn fails verification (if enabled)
    exit 10 unless burn opt[:imagefile], opt[:uuidfile], opt[:targetfile], opt.fetch(:check, false)
  end
end
